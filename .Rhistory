cvbase_cluster[c(21:30)] = NULL
head(cvbase_cluster)
#load world happiness report
whr_raw = read.csv('world-happiness-report-2021.csv')
#pick out relevant data
whr = whr_raw %>%
select(Country.name, Logged.GDP.per.capita, Social.support, Healthy.life.expectancy, Freedom.to.make.life.choices, Generosity, Perceptions.of.corruption)
# k-means silhoutte
i_silhouette_score = function(k){
km = kmeans(whr[,2:7], centers = k, nstart = 20)
ss = silhouette(km$cluster, dist(whr[,2:7]))
mean(ss[,3])
}
k = 2:10
avg_sil = sapply(k, i_silhouette_score)
plot(k,type = 'b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores')
# k-means clustering
whr[,2:7] = scale(whr[,2:7])
whr_fit = kmeans(whr[,2:7], 3, nstart = 20)
cluster = whr$Country[whr_fit$cluster ==1]
cvbase_cluster = cvbase %>%
filter(coded_country %in% cluster)
cvbase_cluster$ProSocial_score = rowSums(cvbase_cluster[51:54], na.rm = TRUE)
cvbase_cluster[c(21:30)] = NULL
head(cvbase_cluster)
#load world happiness report
whr_raw = read.csv('world-happiness-report-2021.csv')
#pick out relevant data
whr = whr_raw %>%
select(Country.name, Logged.GDP.per.capita, Social.support, Healthy.life.expectancy, Freedom.to.make.life.choices, Generosity, Perceptions.of.corruption)
# k-means silhoutte
i_silhouette_score = function(k){
km = kmeans(whr[,2:7], centers = k, nstart = 20)
ss = silhouette(km$cluster, dist(whr[,2:7]))
mean(ss[,3])
}
k = 2:10
avg_sil = sapply(k, i_silhouette_score)
plot(k,type = 'b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores')
# k-means clustering
whr[,2:7] = scale(whr[,2:7])
whr_fit = kmeans(whr[,2:7], 2, nstart = 20)
cluster = whr$Country[whr_fit$cluster ==1]
cvbase_cluster = cvbase %>%
filter(coded_country %in% cluster)
cvbase_cluster$ProSocial_score = rowSums(cvbase_cluster[51:54], na.rm = TRUE)
cvbase_cluster[c(21:30)] = NULL
head(cvbase_cluster)
#blank data frame for linear regressions
lin_reg_cluster = data.frame(NULL)
#linear regression of all points
for(i in 1:39){
m <- summary(lm(ProSocial_score ~ cvbase_cluster[,i], data = cvbase_cluster))    # run model
lin_reg_cluster[i, 1] <- names(cvbase_cluster)[i]           # print variable name
lin_reg_cluster[i, 2] <- m$r.squared
}
#regression for FTE
cluster_fte = cvbase_FTE
cluster_fte_fit= summary(lm(ProSocial_Score ~ FTE_equivalent, data = cluster_fte))
lin_reg_cluster[40, 1] <- 'FTE_equivalent'
lin_reg_cluster[40, 2] <- cluster_fte_fit$r.squared
names(lin_reg_cluster) = c('Variable','r_squared')
lin_reg_cluster = lin_reg_cluster[order(lin_reg_cluster$r_squared, decreasing = TRUE),]
head(lin_reg_cluster)
#load world happiness report
whr_raw = read.csv('world-happiness-report-2021.csv')
#pick out relevant data
whr = whr_raw %>%
select(Country.name, Logged.GDP.per.capita, Social.support, Healthy.life.expectancy, Freedom.to.make.life.choices, Generosity, Perceptions.of.corruption)
# k-means silhoutte
i_silhouette_score = function(k){
km = kmeans(whr[,2:7], centers = k, nstart = 20)
ss = silhouette(km$cluster, dist(whr[,2:7]))
mean(ss[,3])
}
k = 2:10
avg_sil = sapply(k, i_silhouette_score)
plot(k,type = 'b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores')
# k-means clustering
whr[,2:7] = scale(whr[,2:7])
whr_fit = kmeans(whr[,2:7], 2, nstart = 20)
cluster = whr$Country[whr_fit$cluster ==1]
cvbase_cluster = cvbase %>%
filter(coded_country %in% cluster)
cvbase_cluster$ProSocial_score = rowSums(cvbase_cluster[51:54], na.rm = TRUE)
cvbase_cluster[c(21:30)] = NULL
#load world happiness report
whr_raw = read.csv('world-happiness-report-2021.csv')
#pick out relevant data
whr = whr_raw %>%
select(Country.name, Logged.GDP.per.capita, Social.support, Healthy.life.expectancy, Freedom.to.make.life.choices, Generosity, Perceptions.of.corruption)
# k-means silhoutte
i_silhouette_score = function(k){
km = kmeans(whr[,2:7], centers = k, nstart = 20)
ss = silhouette(km$cluster, dist(whr[,2:7]))
mean(ss[,3])
}
k = 2:10
avg_sil = sapply(k, i_silhouette_score)
plot(k,type = 'b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores')
# k-means clustering
whr[,2:7] = scale(whr[,2:7])
whr_fit = kmeans(whr[,2:7], 2, nstart = 20)
whr_fit
cluster = whr$Country[whr_fit$cluster ==1]
cvbase_cluster = cvbase %>%
filter(coded_country %in% cluster)
cvbase_cluster$ProSocial_score = rowSums(cvbase_cluster[51:54], na.rm = TRUE)
cvbase_cluster[c(21:30)] = NULL
#load world happiness report
whr_raw = read.csv('world-happiness-report-2021.csv')
#pick out relevant data
whr = whr_raw %>%
select(Country.name, Logged.GDP.per.capita, Social.support, Healthy.life.expectancy, Freedom.to.make.life.choices, Generosity, Perceptions.of.corruption)
# k-means silhoutte
i_silhouette_score = function(k){
km = kmeans(whr[,2:7], centers = k, nstart = 20)
ss = silhouette(km$cluster, dist(whr[,2:7]))
mean(ss[,3])
}
k = 2:10
avg_sil = sapply(k, i_silhouette_score)
plot(k,type = 'b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores')
# k-means clustering
whr[,2:7] = scale(whr[,2:7])
whr_fit = kmeans(whr[,2:7], 2, nstart = 20)
table(actual = whr$Country, fitted = whr_fit$cluster)
cluster = whr$Country[whr_fit$cluster ==1]
cvbase_cluster = cvbase %>%
filter(coded_country %in% cluster)
cvbase_cluster$ProSocial_score = rowSums(cvbase_cluster[51:54], na.rm = TRUE)
cvbase_cluster[c(21:30)] = NULL
#load world happiness report
whr_raw = read.csv('world-happiness-report-2021.csv')
#pick out relevant data
whr = whr_raw %>%
select(Country.name, Logged.GDP.per.capita, Social.support, Healthy.life.expectancy, Freedom.to.make.life.choices, Generosity, Perceptions.of.corruption)
# k-means silhoutte
i_silhouette_score = function(k){
km = kmeans(whr[,2:7], centers = k, nstart = 20)
ss = silhouette(km$cluster, dist(whr[,2:7]))
mean(ss[,3])
}
k = 2:10
avg_sil = sapply(k, i_silhouette_score)
plot(k,type = 'b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores')
# k-means clustering
whr[,2:7] = scale(whr[,2:7])
whr_fit = kmeans(whr[,2:7], 2, nstart = 20)
table(actual = whr$Country, fitted = whr_fit$cluster)['pakistan']
cluster = whr$Country[whr_fit$cluster ==1]
cvbase_cluster = cvbase %>%
filter(coded_country %in% cluster)
cvbase_cluster$ProSocial_score = rowSums(cvbase_cluster[51:54], na.rm = TRUE)
cvbase_cluster[c(21:30)] = NULL
#load world happiness report
whr_raw = read.csv('world-happiness-report-2021.csv')
#pick out relevant data
whr = whr_raw %>%
select(Country.name, Logged.GDP.per.capita, Social.support, Healthy.life.expectancy, Freedom.to.make.life.choices, Generosity, Perceptions.of.corruption)
# k-means silhoutte
i_silhouette_score = function(k){
km = kmeans(whr[,2:7], centers = k, nstart = 20)
ss = silhouette(km$cluster, dist(whr[,2:7]))
mean(ss[,3])
}
k = 2:10
avg_sil = sapply(k, i_silhouette_score)
plot(k,type = 'b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores')
# k-means clustering
whr[,2:7] = scale(whr[,2:7])
whr_fit = kmeans(whr[,2:7], 2, nstart = 20)
table(actual = whr$Country, fitted = whr_fit$cluster)['Pakistan']
cluster = whr$Country[whr_fit$cluster ==1]
cvbase_cluster = cvbase %>%
filter(coded_country %in% cluster)
cvbase_cluster$ProSocial_score = rowSums(cvbase_cluster[51:54], na.rm = TRUE)
cvbase_cluster[c(21:30)] = NULL
#load world happiness report
whr_raw = read.csv('world-happiness-report-2021.csv')
#pick out relevant data
whr = whr_raw %>%
select(Country.name, Logged.GDP.per.capita, Social.support, Healthy.life.expectancy, Freedom.to.make.life.choices, Generosity, Perceptions.of.corruption)
# k-means silhoutte
i_silhouette_score = function(k){
km = kmeans(whr[,2:7], centers = k, nstart = 20)
ss = silhouette(km$cluster, dist(whr[,2:7]))
mean(ss[,3])
}
k = 2:10
avg_sil = sapply(k, i_silhouette_score)
plot(k,type = 'b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores')
# k-means clustering
whr[,2:7] = scale(whr[,2:7])
whr_fit = kmeans(whr[,2:7], 2, nstart = 20)
table(actual = whr$Country, fitted = whr_fit$cluster)[actual ='Pakistan']
cluster = whr$Country[whr_fit$cluster ==1]
cvbase_cluster = cvbase %>%
filter(coded_country %in% cluster)
cvbase_cluster$ProSocial_score = rowSums(cvbase_cluster[51:54], na.rm = TRUE)
cvbase_cluster[c(21:30)] = NULL
#load world happiness report
whr_raw = read.csv('world-happiness-report-2021.csv')
#pick out relevant data
whr = whr_raw %>%
select(Country.name, Logged.GDP.per.capita, Social.support, Healthy.life.expectancy, Freedom.to.make.life.choices, Generosity, Perceptions.of.corruption)
# k-means silhoutte
i_silhouette_score = function(k){
km = kmeans(whr[,2:7], centers = k, nstart = 20)
ss = silhouette(km$cluster, dist(whr[,2:7]))
mean(ss[,3])
}
k = 2:10
avg_sil = sapply(k, i_silhouette_score)
plot(k,type = 'b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores')
# k-means clustering
whr[,2:7] = scale(whr[,2:7])
whr_fit = kmeans(whr[,2:7], 2, nstart = 20)
table(actual = whr$Country, fitted = whr_fit$cluster)[actual =='Pakistan']
#load world happiness report
whr_raw = read.csv('world-happiness-report-2021.csv')
#pick out relevant data
whr = whr_raw %>%
select(Country.name, Logged.GDP.per.capita, Social.support, Healthy.life.expectancy, Freedom.to.make.life.choices, Generosity, Perceptions.of.corruption)
# k-means silhoutte
i_silhouette_score = function(k){
km = kmeans(whr[,2:7], centers = k, nstart = 20)
ss = silhouette(km$cluster, dist(whr[,2:7]))
mean(ss[,3])
}
k = 2:10
avg_sil = sapply(k, i_silhouette_score)
plot(k,type = 'b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores')
# k-means clustering
whr[,2:7] = scale(whr[,2:7])
whr_fit = kmeans(whr[,2:7], 2, nstart = 20)
table(actual = whr$Country, fitted = whr_fit$cluster)
cluster = whr$Country[whr_fit$cluster ==1]
cvbase_cluster = cvbase %>%
filter(coded_country %in% cluster)
cvbase_cluster$ProSocial_score = rowSums(cvbase_cluster[51:54], na.rm = TRUE)
cvbase_cluster[c(21:30)] = NULL
graph_data = variable_psp %>%
select(coded_country, lifeSat)
graph_data = merge(graph_data, proso_score)
graph_data = merge(graph_data,country_psp)
graph_data
ggplot(graph_data)+
aes(x=PSP, y= ProSocial_Score)+
geom_point(aes(size = lifeSat))
cvbase_FTE
graph_data = aggregate(cvbase_FTE[5],cvbase_FTE[1], mean)
graph_data = merge(graph_data, proso_score)
graph_data = merge(graph_data,country_psp)
graph_data
ggplot(graph_data)+
aes(x=PSP, y= ProSocial_Score)+
geom_point(aes(size = lifeSat))
graph_data = aggregate(cvbase_FTE[5],cvbase_FTE[1], mean)
graph_data = merge(graph_data, proso_score)
graph_data = merge(graph_data,country_psp)
graph_data
ggplot(graph_data)+
aes(x=PSP, y= ProSocial_Score)+
geom_point(aes(size = FTE_equivalent))
cvbase_FTE
graph_data = aggregate(cvbase_FTE[5],cvbase_FTE[1], mean)
graph_data = merge(graph_data, proso_score)
graph_data = merge(graph_data,country_psp)
graph_data
ggplot(graph_data)+
aes(x=PSP, y= ProSocial_Score)+
geom_point(aes(size = FTE_equivalent))
library(dplyr)
library(ggplot2)
library(tidyverse)
library(cluster)
# load raw data
rm(list = ls())
set.seed(32535813) # XXXXXXXX = your student ID
cvbase_raw = read.csv("PsyCoronaBaselineExtract.csv")
cvbase_raw <- cvbase_raw[sample(nrow(cvbase_raw), 40000), ]
#data set statistics
dim(cvbase_raw)
sum(is.na(cvbase_raw))
#dropping no coded country
cvbase = cvbase_raw
cvbase = cvbase[!(cvbase$coded_country == ""),]
response_data = cvbase
#dropping non relevant data
response_data[c(21:30,47:49, 51:54)] = NULL
# make neutral responses equal to 0
response_data = response_data %>%
#Affect concept
mutate(response_data[1:13]-1)%>%
#c19Norm
mutate(response_data[32:34]-3)%>%
#trust in government
mutate(response_data[35:36]-3)%>%
#happy
mutate(response_data[27]-5) %>%
#lifesat
mutate(response_data[28] - 3)
# Dealing with employment status variables
cvbase_employ = cvbase
cvbase_employ = cvbase_employ %>%
select(coded_country, employstatus_1, employstatus_2, employstatus_3, employstatus_10, employstatus_4, employstatus_9, c19ProSo01, c19ProSo02, c19ProSo03, c19ProSo04)
cvbase_employ[is.na(cvbase_employ)] = 0
#flag variable = 1 if person is working at all, will be used to calculate total workforce capacity
cvbase_employ = cvbase_employ %>%
mutate(able_flag = + (if_any(2:5, ~ .x %in% 1))) %>% #all able to work
mutate(curr_flag = + (if_any(2:4, ~ .x %in% 1))) %>% #those who are currently working or volunteering
mutate(employstatus_1 = employstatus_1*0.3) %>%
mutate(employstatus_2 = employstatus_2 * 0.79)%>%
mutate(employstatus_10 = employstatus_10 *0.5) %>%
mutate(employstatus_9 = employstatus_9 *0.5)
cvbase_employ$ProSocial_Score =  rowSums(cvbase_employ[8:11], na.rm = TRUE)
cvbase_employ$FTE_equivalent = rowSums(cvbase_employ[2:6]) *cvbase_employ$curr_flag
cvbase_employ[8:11] = NULL
cvbase_FTE = cvbase_employ
cvbase_FTE[2:7] = NULL
work_prop = aggregate(cvbase_FTE[2:3],  cvbase_FTE[1], sum)
work_prop = work_prop%>%
mutate(proportion_working = curr_flag/able_flag)
work_prop[is.na(work_prop)] = 0
work_prop[2:3] = NULL
# normalising results
max_score = read.csv('max_scores.csv')
for(i in 1:36){
response_data[i] = response_data[i] / max_score[1,i]
}
# mean of responses by country rounded to 2 decimal places
response_ave = aggregate(response_data[1:36], response_data[37], mean, na.rm = TRUE)
response_ave = response_ave %>%
mutate_if(is.double, round, digits = 2)
#Apply weightings to results to create variable PSP
weightings = read.csv('weightings.csv')
variable_psp = response_ave
# Make NA values = 0
variable_psp[is.na(variable_psp)] = 0
for(i in 1:36){
variable_psp[i+1] = variable_psp[i+1] * weightings[1,i]
}
variable_psp = merge(variable_psp,work_prop)
# country PSP
country_psp = variable_psp %>%
mutate(PSP = rowSums(variable_psp[2:38])) %>%
select(coded_country,PSP)
# Getting only ProSocial data
cvbase_proso =  cvbase %>%
select(coded_country, c19ProSo01, c19ProSo02, c19ProSo03, c19ProSo04)
cvbase_proso = aggregate(cvbase_proso[2:5],cvbase_proso[1], mean, na.rm = TRUE)
cvbase_proso = cvbase_proso %>%
mutate_if(is.double, round, 2)
cvbase_proso[is.na(cvbase_proso)] = 0
# Overall ProSo Score
proso_score = cvbase_proso %>%
mutate(ProSocial_Score = rowSums(cvbase_proso[2:5]), na.rm = TRUE) %>%
select(coded_country,ProSocial_Score)
#coreleation between PSP and ProSo Score
cvbase_all_scores = merge(country_psp,proso_score)
# getting row index of Pakistan
which(cvbase_all_scores == 'Pakistan')
# Linear Regression
fit = lm(ProSocial_Score ~ PSP, data = cvbase_all_scores)
summary(fit)$adj.r.squared
#plotting
ggplot(cvbase_all_scores) +
aes(x = PSP, y = ProSocial_Score) +
geom_point() +
geom_smooth(method = 'lm')
plot_country_psp = country_psp
plot_country_psp$coded_country[plot_country_psp$coded_country == 'United States of America'] = 'USA'
plot_country_psp$coded_country[plot_country_psp$coded_country == 'United Kingdom'] = "UK"
world_map = map_data('world')
ggplot(plot_country_psp) +
geom_map(
dat = world_map, map = world_map, aes(map_id = region),
fill = 'grey', color = '#7f7f7f', size = 0.25
) +
geom_map(map = world_map, aes(map_id = coded_country, fill = PSP), size = 0.025) +
scale_fill_gradient(low = '#FB1B01', high ='#8EFB01', name = 'PSP') +
expand_limits(x = world_map$long, y = world_map$lat)
# Normalising PSP and ProSo scores to Pakistan
score_pakistan = cvbase_all_scores
score_pakistan[2] =score_pakistan[2] / score_pakistan$PSP[78]
score_pakistan[3] = score_pakistan[3] / score_pakistan$ProSocial_Score[78]
score_pakistan = score_pakistan %>%
mutate_if(is_double, round, 2)
head(score_pakistan)
# Counting how many countries score higher than Pakistan
sum(score_pakistan$PSP >1)
sum(score_pakistan$ProSocial_Score >1)
ggplot(score_pakistan)+
aes('PSP compared to Pakistan', PSP) +
geom_point(size=4, alpha=0.7, position=position_jitter(w=0.1, h=0))+
geom_hline(yintercept =1, linetype = 'dashed', color = 'red')
ggplot(score_pakistan)+
aes('Pro Social Score compared toPakistan', ProSocial_Score) +
geom_point(size=4, alpha=0.7, position=position_jitter(w=0.1, h=0))+
geom_hline(yintercept =1, linetype = 'dashed', color = 'red')
# getting pakistan only data
cvbase_pakistan = cvbase %>%
filter(coded_country == 'Pakistan')
cvbase_pakistan$ProSocial_score = rowSums(cvbase_pakistan[51:54], na.rm = TRUE)
cvbase_pakistan[c(21:30)] = NULL
#blank data frame for linear regressions
lin_reg_pakistan = data.frame(NULL)
#linear regression of all points
for(i in 1:39){
m <- summary(lm(ProSocial_score ~ cvbase_pakistan[,i], data = cvbase_pakistan))    # run model
lin_reg_pakistan[i, 1] <- names(cvbase_pakistan)[i]           # print variable name
lin_reg_pakistan[i, 2] <- m$r.squared
}
#regression for FTE
pakistan_fte = cvbase_FTE
pakistan_fte = pakistan_fte %>%
filter(coded_country == 'Pakistan')
pakistan_fte_fit= summary(lm(ProSocial_Score ~ FTE_equivalent, data = pakistan_fte))
lin_reg_pakistan[40, 1] <- 'FTE_equivalent'
lin_reg_pakistan[40, 2] <- pakistan_fte_fit$r.squared
#final dataframe
names(lin_reg_pakistan) = c('Variable','r_squared')
lin_reg_pakistan = lin_reg_pakistan[order(lin_reg_pakistan$r_squared, decreasing = TRUE),]
head(lin_reg_pakistan)
#repeat for all other countries
cvbase_others = cvbase %>%
filter(coded_country != 'pakistan')
cvbase_others$ProSocial_score = rowSums(cvbase_others[51:54], na.rm = TRUE)
cvbase_others[c(21:30)] = NULL
#blank data frame for linear regressions
lin_reg_others = data.frame(NULL)
#linear regression of all points
for(i in 1:39){
m <- summary(lm(ProSocial_score ~ cvbase_others[,i], data = cvbase_others))    # run model
lin_reg_others[i, 1] <- names(cvbase_others)[i]           # print variable name
lin_reg_others[i, 2] <- m$r.squared
}
#regression for FTE
others_fte = cvbase_FTE
others_fte = others_fte %>%
filter(coded_country != 'Pakistan')
others_fte_fit= summary(lm(ProSocial_Score ~ FTE_equivalent, data = others_fte))
lin_reg_others[40, 1] <- 'FTE_equivalent'
lin_reg_others[40, 2] <- others_fte_fit$r.squared
names(lin_reg_others) = c('Variable','r_squared')
lin_reg_others = lin_reg_others[order(lin_reg_others$r_squared, decreasing = TRUE),]
head(lin_reg_others)
graph_data = aggregate(cvbase_FTE[5],cvbase_FTE[1], mean)
graph_data = merge(graph_data, proso_score)
graph_data = merge(graph_data,country_psp)
ggplot(graph_data)+
aes(x=PSP, y= ProSocial_Score)+
geom_point(aes(size = FTE_equivalent))
#load world happiness report
whr_raw = read.csv('world-happiness-report-2021.csv')
#pick out relevant data
whr = whr_raw %>%
select(Country.name, Logged.GDP.per.capita, Social.support, Healthy.life.expectancy, Freedom.to.make.life.choices, Generosity, Perceptions.of.corruption)
# k-means silhoutte
i_silhouette_score = function(k){
km = kmeans(whr[,2:7], centers = k, nstart = 20)
ss = silhouette(km$cluster, dist(whr[,2:7]))
mean(ss[,3])
}
k = 2:10
avg_sil = sapply(k, i_silhouette_score)
plot(k,type = 'b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores')
# k-means clustering
whr[,2:7] = scale(whr[,2:7])
whr_fit = kmeans(whr[,2:7], 2, nstart = 20)
#table(actual = whr$Country, fitted = whr_fit$cluster)
cluster = whr$Country[whr_fit$cluster ==1]
cvbase_cluster = cvbase %>%
filter(coded_country %in% cluster)
cvbase_cluster$ProSocial_score = rowSums(cvbase_cluster[51:54], na.rm = TRUE)
cvbase_cluster[c(21:30)] = NULL
#blank data frame for linear regressions
lin_reg_cluster = data.frame(NULL)
#linear regression of all points
for(i in 1:39){
m <- summary(lm(ProSocial_score ~ cvbase_cluster[,i], data = cvbase_cluster))    # run model
lin_reg_cluster[i, 1] <- names(cvbase_cluster)[i]           # print variable name
lin_reg_cluster[i, 2] <- m$r.squared
}
#regression for FTE
cluster_fte = cvbase_FTE
cluster_fte_fit= summary(lm(ProSocial_Score ~ FTE_equivalent, data = cluster_fte))
lin_reg_cluster[40, 1] <- 'FTE_equivalent'
lin_reg_cluster[40, 2] <- cluster_fte_fit$r.squared
names(lin_reg_cluster) = c('Variable','r_squared')
lin_reg_cluster = lin_reg_cluster[order(lin_reg_cluster$r_squared, decreasing = TRUE),]
head(lin_reg_cluster)
whr
max_score
weightings
ggplot(score_pakistan)+
aes('PSP', PSP) +
geom_point(size=4, alpha=0.7, position=position_jitter(w=0.1, h=0))+
geom_hline(yintercept =1, linetype = 'dashed', color = 'red')+
ylab('Fold Change to Pakistan')
ggplot(score_pakistan)+
aes('', PSP) +
geom_point(size=4, alpha=0.7, position=position_jitter(w=0.1, h=0))+
geom_hline(yintercept =1, linetype = 'dashed', color = 'red')+
ylab('Fold Change to Pakistan')
ggplot(score_pakistan)+
aes('', ProSocial_Score) +
geom_point(size=4, alpha=0.7, position=position_jitter(w=0.1, h=0))+
geom_hline(yintercept =1, linetype = 'dashed', color = 'red')+
ylab('Fold Change to Pakistan')+
xlab('Pro Social Score')
